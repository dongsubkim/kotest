"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[7430],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,f=p["".concat(s,".").concat(d)]||p[d]||u[d]||r;return n?o.createElement(f,a(a({ref:t},m),{},{components:n})):o.createElement(f,a({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4272:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return p}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],l={title:"Timeouts",slug:"timeouts.html"},s=void 0,c={unversionedId:"framework/timeout",id:"framework/timeout",isDocsHomePage:!1,title:"Timeouts",description:"Tests have two types of timeout that can be applied. The first is the overall time for all invocations of a test. This is just called timeout.",source:"@site/docs/framework/timeout.md",sourceDirName:"framework",slug:"/framework/timeouts.html",permalink:"/docs/framework/timeouts.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/timeout.md",tags:[],version:"current",frontMatter:{title:"Timeouts",slug:"timeouts.html"},sidebar:"framework",previous:{title:"Test Factories",permalink:"/docs/framework/test-factories.html"}},m=[{value:"Test Level Timeouts",id:"test-level-timeouts",children:[],level:2},{value:"Spec Level Timeouts",id:"spec-level-timeouts",children:[],level:2},{value:"Global Timeouts",id:"global-timeouts",children:[{value:"System Property",id:"system-property",children:[],level:3},{value:"Project Config",id:"project-config",children:[],level:3}],level:2}],u={toc:m};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Tests have two types of timeout that can be applied. The first is the overall time for all invocations of a test. This is just called ",(0,r.kt)("em",{parentName:"p"},"timeout"),".\nThe second is per individual run of a test, and this is called ",(0,r.kt)("em",{parentName:"p"},"invocation timeout"),"."),(0,r.kt)("p",null,"Kotest can be configured to invoke a test multiple times. For example,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TimeoutTest : DescribeSpec({\n\n   describe("my test context") {\n        it("run me three times").config(invocations = 3) {\n            // some slow network test that takes 1500 millis\n        }\n   }\n\n})\n')),(0,r.kt)("p",null,"In this case, a ",(0,r.kt)("em",{parentName:"p"},"timeout")," of 2000 millis would cause the test to fail, because the total run time would be 4500 millis.\nWhereas an ",(0,r.kt)("em",{parentName:"p"},"invocation timeout")," of 2000 millis would not cause the test to fail, because each individual run is 1500 millis."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The time taken for a test includes the execution time taken for nested tests, so factor this into your timeouts."))),(0,r.kt)("p",null,"We can specify the timeout at three levels."),(0,r.kt)("h2",{id:"test-level-timeouts"},"Test Level Timeouts"),(0,r.kt)("p",null,"The most finely grained location for timeouts it on leaf tests directly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TimeoutTest : DescribeSpec({\n\n   describe("my test context") {\n        it("timeout after 750ms").config(timeout = 750.milliseconds, invocationTimeout = 250.milliseconds) {\n        }\n   }\n\n})\n')),(0,r.kt)("h2",{id:"spec-level-timeouts"},"Spec Level Timeouts"),(0,r.kt)("p",null,"Timeouts can be specified at the spec level for every test in that spec, unless overriden by the test case itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TimeoutTest : DescribeSpec({\n\n   timeout = 1250.milliseconds\n\n   describe("I will timeout in 1250 millis") {\n      it("And so will I") { }\n      it("But I\'m a little faster").config(timeout = 500.milliseconds) { }\n   }\n\n})\n')),(0,r.kt)("h2",{id:"global-timeouts"},"Global Timeouts"),(0,r.kt)("p",null,"We can set global config in two ways - via system properties or by project config."),(0,r.kt)("h3",{id:"system-property"},"System Property"),(0,r.kt)("p",null,"To set the global timeout or invocation timeout at the command line, use the system property ",(0,r.kt)("inlineCode",{parentName:"p"},"kotest.framework.timeout")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kotest.framework.invocation.timeout")," with a value in milliseconds."),(0,r.kt)("h3",{id:"project-config"},"Project Config"),(0,r.kt)("p",null,"We can set a global default for both timeout and invocationTimeout inside ",(0,r.kt)("a",{parentName:"p",href:"/docs/framework/project-config.html"},"project config"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"object ProjectConfig : AbstractProjectConfig {\n    override val timeout = 2.seconds\n    override val invocationTimeout = 1.second\n}\n")),(0,r.kt)("p",null,"Global config is overridden by spec level and test case level values."))}p.isMDXComponent=!0}}]);
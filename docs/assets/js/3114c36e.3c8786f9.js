"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[6122],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,d=p["".concat(a,".").concat(m)]||p[m]||f[m]||s;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7781:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=r(7462),o=r(3366),s=(r(7294),r(3905)),i=["components"],c={title:"Test Extensions",slug:"test-extensions.html"},a=void 0,l={unversionedId:"framework/test_extensions",id:"framework/test_extensions",isDocsHomePage:!1,title:"Test Extensions",description:"Discovery Extensions",source:"@site/docs/framework/test_extensions.md",sourceDirName:"framework",slug:"/framework/test-extensions.html",permalink:"/docs/framework/test-extensions.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_extensions.md",tags:[],version:"current",frontMatter:{title:"Test Extensions",slug:"test-extensions.html"},sidebar:"framework",previous:{title:"System properties",permalink:"/docs/framework/framework-config-props.html"},next:{title:"Test Factories",permalink:"/docs/framework/test-factories.html"}},u=[{value:"Discovery Extensions",id:"discovery-extensions",children:[],level:3}],f={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"discovery-extensions"},"Discovery Extensions"),(0,s.kt)("p",null,"Kotest allows developers to configure how test classes are discovered. By default classes are scanned from the classpath\nbut this extension allows developers to inject classes from any source. For full details see ",(0,s.kt)("a",{parentName:"p",href:"/docs/framework/discovery-extensions.html"},"here")))}p.isMDXComponent=!0}}]);